{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";var _excluded=[\"name\",\"onPress\",\"forceTextInputFocus\",\"color\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React from'react';import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import IconButton from\"../../IconButton\";export var ICON_SIZE=24;var ICON_OFFSET=12;var StyleContext=React.createContext({style:{},isTextInputFocused:false,forceFocus:function forceFocus(){}});var IconAdornment=function IconAdornment(_ref){var icon=_ref.icon,topPosition=_ref.topPosition,side=_ref.side,isTextInputFocused=_ref.isTextInputFocused,forceFocus=_ref.forceFocus;var style=_defineProperty({top:topPosition},side,ICON_OFFSET);var contextState={style:style,isTextInputFocused:isTextInputFocused,forceFocus:forceFocus};return React.createElement(StyleContext.Provider,{value:contextState},icon);};var TextInputIcon=function TextInputIcon(_ref2){var name=_ref2.name,onPress=_ref2.onPress,forceTextInputFocus=_ref2.forceTextInputFocus,color=_ref2.color,rest=_objectWithoutProperties(_ref2,_excluded);var _React$useContext=React.useContext(StyleContext),style=_React$useContext.style,isTextInputFocused=_React$useContext.isTextInputFocused,forceFocus=_React$useContext.forceFocus;var onPressWithFocusControl=React.useCallback(function(){if(forceTextInputFocus&&!isTextInputFocused){forceFocus();}onPress===null||onPress===void 0?void 0:onPress();},[forceTextInputFocus,forceFocus,isTextInputFocused,onPress]);return React.createElement(View,{style:[styles.container,style]},React.createElement(IconButton,_extends({icon:name,style:styles.iconButton,size:ICON_SIZE,onPress:onPressWithFocusControl,color:typeof color==='function'?color(isTextInputFocused):color},rest)));};TextInputIcon.displayName='TextInput.Icon';TextInputIcon.defaultProps={forceTextInputFocus:true};var styles=StyleSheet.create({container:{position:'absolute',width:ICON_SIZE,height:ICON_SIZE,justifyContent:'center',alignItems:'center'},iconButton:{margin:0}});export default TextInputIcon;export{IconAdornment};","map":{"version":3,"sources":["TextInputIcon.tsx"],"names":["ICON_SIZE","ICON_OFFSET","StyleContext","style","isTextInputFocused","forceFocus","IconAdornment","top","contextState","TextInputIcon","rest","React","onPressWithFocusControl","forceTextInputFocus","onPress","styles","color","container","position","width","height","justifyContent","alignItems","iconButton","margin"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\n\nimport IconButton from '../../IconButton';\nimport type { $Omit } from '../../../../src/types';\nimport type { IconSource } from '../../Icon';\n\nexport type Props = $Omit<\n  React.ComponentProps<typeof IconButton>,\n  'icon' | 'theme' | 'color'\n> & {\n  /**\n   * Icon to show.\n   */\n  name: IconSource;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Whether the TextInput will focus after onPress.\n   */\n  forceTextInputFocus?: boolean;\n  /**\n   * Color of the icon or a function receiving a boolean indicating whether the TextInput is focused and returning the color.\n   */\n  color?: ((isTextInputFocused: boolean) => string | undefined) | string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: ReactNativePaper.Theme;\n};\n\nexport const ICON_SIZE = 24;\nconst ICON_OFFSET = 12;\n\ntype StyleContextType = {\n  style: StyleProp<ViewStyle>;\n  isTextInputFocused: boolean;\n  forceFocus: () => void;\n};\n\nconst StyleContext = React.createContext<StyleContextType>({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: () => {},\n});\n\nconst IconAdornment: React.FunctionComponent<\n  {\n    testID: string;\n    icon: React.ReactNode;\n    topPosition: number;\n    side: 'left' | 'right';\n  } & Omit<StyleContextType, 'style'>\n> = ({ icon, topPosition, side, isTextInputFocused, forceFocus }) => {\n  const style = {\n    top: topPosition,\n    [side]: ICON_OFFSET,\n  };\n  const contextState = { style, isTextInputFocused, forceFocus };\n\n  return (\n    <StyleContext.Provider value={contextState}>{icon}</StyleContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing icon in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       label=\"Password\"\n *       secureTextEntry\n *       right={<TextInput.Icon name=\"eye\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputIcon = ({\n  name,\n  onPress,\n  forceTextInputFocus,\n  color,\n  ...rest\n}: Props) => {\n  const { style, isTextInputFocused, forceFocus } =\n    React.useContext(StyleContext);\n\n  const onPressWithFocusControl = React.useCallback(() => {\n    if (forceTextInputFocus && !isTextInputFocused) {\n      forceFocus();\n    }\n    onPress?.();\n  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);\n\n  return (\n    <View style={[styles.container, style]}>\n      <IconButton\n        icon={name}\n        style={styles.iconButton}\n        size={ICON_SIZE}\n        onPress={onPressWithFocusControl}\n        color={typeof color === 'function' ? color(isTextInputFocused) : color}\n        {...rest}\n      />\n    </View>\n  );\n};\nTextInputIcon.displayName = 'TextInput.Icon';\n\nTextInputIcon.defaultProps = {\n  forceTextInputFocus: true,\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  iconButton: {\n    margin: 0,\n  },\n});\n\nexport default TextInputIcon;\n\n// @component-docs ignore-next-line\nexport { IconAdornment };\n"]},"metadata":{},"sourceType":"module"}