{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";var _excluded=[\"syncGetter\"];import _regeneratorRuntime from\"@babel/runtime/regenerator\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import Platform from\"react-native-web/dist/exports/Platform\";var memo={};export function clearMemo(){memo={};}function getSupportedFunction(supportedPlatforms,getter,defaultGetter){var supportedMap={};supportedPlatforms.filter(function(key){return Platform.OS==key;}).forEach(function(key){return supportedMap[key]=getter;});return Platform.select(_objectSpread(_objectSpread({},supportedMap),{},{default:defaultGetter}));}export function getSupportedPlatformInfoSync(_ref){var getter=_ref.getter,supportedPlatforms=_ref.supportedPlatforms,defaultValue=_ref.defaultValue,memoKey=_ref.memoKey;if(memoKey&&memo[memoKey]!=undefined){return memo[memoKey];}else{var output=getSupportedFunction(supportedPlatforms,getter,function(){return defaultValue;})();if(memoKey){memo[memoKey]=output;}return output;}}export function getSupportedPlatformInfoAsync(_ref2){var getter,supportedPlatforms,defaultValue,memoKey,output;return _regeneratorRuntime.async(function getSupportedPlatformInfoAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:getter=_ref2.getter,supportedPlatforms=_ref2.supportedPlatforms,defaultValue=_ref2.defaultValue,memoKey=_ref2.memoKey;if(!(memoKey&&memo[memoKey]!=undefined)){_context.next=5;break;}return _context.abrupt(\"return\",memo[memoKey]);case 5:_context.next=7;return _regeneratorRuntime.awrap(getSupportedFunction(supportedPlatforms,getter,function(){return Promise.resolve(defaultValue);})());case 7:output=_context.sent;if(memoKey){memo[memoKey]=output;}return _context.abrupt(\"return\",output);case 10:case\"end\":return _context.stop();}}},null,null,null,Promise);}export function getSupportedPlatformInfoFunctions(_ref3){var syncGetter=_ref3.syncGetter,asyncParams=_objectWithoutProperties(_ref3,_excluded);return[function(){return getSupportedPlatformInfoAsync(asyncParams);},function(){return getSupportedPlatformInfoSync(_objectSpread(_objectSpread({},asyncParams),{},{getter:syncGetter}));}];}","map":{"version":3,"sources":["supported-platform-info.ts"],"names":["memo","supportedMap","supportedPlatforms","key","Platform","default","defaultGetter","memoKey","output","getSupportedFunction","Promise","asyncParams","getSupportedPlatformInfoAsync","getSupportedPlatformInfoSync","getter","syncGetter"],"mappings":"mjCAYA,GAAIA,CAAAA,IAAc,CAAlB,EAAA,CAEA,MAAO,SAAA,CAAA,SAAA,EAAqB,CAC1BA,IAAI,CAAJA,EAAAA,CACD,CAQD,QAAA,CAAA,oBAAA,CAAA,kBAAA,CAAA,MAAA,CAAA,aAAA,CAIa,CACX,GAAIC,CAAAA,YAAiB,CAArB,EAAA,CACAC,kBAAkB,CAAlBA,MAAAA,CACWC,SAAAA,GAAD,QAASC,CAAAA,QAAQ,CAARA,EAAAA,EADnBF,GACU,EADVA,EAAAA,OAAAA,CAEYC,SAAAA,GAAD,QAAUF,CAAAA,YAAY,CAAZA,GAAY,CAAZA,CAFrBC,MAEW,EAFXA,EAGA,MAAO,CAAA,QAAQ,CAAR,MAAA,gCAAgB,YAAhB,MAELG,OAAO,CAAEC,aAFJ,GAAP,CAID,CAMD,MAAO,SAAA,CAAA,4BAAA,MAKsC,IALG,CAAA,MAKH,MALG,MAKH,CALG,kBAKH,MALG,kBAKH,CALG,YAKH,MALG,YAKH,CAD3CC,OAC2C,MAD3CA,OAC2C,CAC3C,GAAIA,OAAO,EAAIP,IAAI,CAAJA,OAAI,CAAJA,EAAf,SAAA,CAA2C,CACzC,MAAOA,CAAAA,IAAI,CAAX,OAAW,CAAX,CADF,CAAA,IAEO,CACL,GAAMQ,CAAAA,MAAM,CAAGC,oBAAoB,CAAA,kBAAA,CAAA,MAAA,CAA6B,iBAAhE,CAAA,YAAgE,EAA7B,CAApBA,EAAf,CACA,GAAA,OAAA,CAAa,CACXT,IAAI,CAAJA,OAAI,CAAJA,CAAAA,MAAAA,CACD,CACD,MAAA,CAAA,MAAA,CACD,CACF,CAMD,MAAO,SAAA,CAAA,6BAAA,yMAAgD,MAAhD,OAAgD,MAAhD,CAAgD,kBAAhD,OAAgD,kBAAhD,CAAgD,YAAhD,OAAgD,YAAhD,CAILO,OAJK,OAILA,OAJK,MAMDA,OAAO,EAAIP,IAAI,CAAJA,OAAI,CAAJA,EAAf,SANK,0DAOIA,IAAI,CAAX,OAAW,CAPR,0DASkBS,oBAAoB,CAAA,kBAAA,CAAA,MAAA,CAA6B,iBACpEC,CAAAA,OAAO,CAAPA,OAAAA,CADF,YACEA,CADoE,EAA7B,CAApBD,EATlB,SASGD,MATH,eAYH,GAAA,OAAA,CAAa,CACXR,IAAI,CAAJA,OAAI,CAAJA,CAAAA,MAAAA,CACD,CAdE,gCAgBH,MAhBG,wEAwBP,MAAO,SAAA,CAAA,iCAAA,OAGyE,IAH3B,CAAA,UAG2B,OAH3B,UAG2B,CAD3EW,WAC2E,2CAC9E,MAAO,CACL,iBAAMC,CAAAA,6BAA6B,CAD9B,WAC8B,CAAnC,EADK,CAEL,iBAAMC,CAAAA,4BAA4B,gCAAC,WAAD,MAAmBC,MAAM,CAAEC,UAA3B,GAAlC,EAFK,CAAP,CAID","sourcesContent":["import { Platform } from 'react-native';\n\nimport {\n  PlatformArray,\n  Getter,\n  GetSupportedPlatformInfoAsyncParams,\n  GetSupportedPlatformInfoSyncParams,\n  GetSupportedPlatformInfoFunctionsParams,\n} from './privateTypes';\n\ntype MemoType = { [key: string]: any };\n// centralized memo object\nlet memo: MemoType = {};\n\nexport function clearMemo() {\n  memo = {};\n}\n\n/**\n * function returns the proper getter based current platform X supported platforms\n * @param supportedPlatforms array of supported platforms (OS)\n * @param getter desired function used to get info\n * @param defaultGetter getter that returns a default value if desired getter is not supported by current platform\n */\nfunction getSupportedFunction<T>(\n  supportedPlatforms: PlatformArray,\n  getter: Getter<T>,\n  defaultGetter: Getter<T>\n): Getter<T> {\n  let supportedMap: any = {};\n  supportedPlatforms\n    .filter((key) => Platform.OS == key)\n    .forEach((key) => (supportedMap[key] = getter));\n  return Platform.select({\n    ...supportedMap,\n    default: defaultGetter,\n  });\n}\n\n/**\n * function used to get desired info synchronously — with optional memoization\n * @param param0\n */\nexport function getSupportedPlatformInfoSync<T>({\n  getter,\n  supportedPlatforms,\n  defaultValue,\n  memoKey,\n}: GetSupportedPlatformInfoSyncParams<T>): T {\n  if (memoKey && memo[memoKey] != undefined) {\n    return memo[memoKey];\n  } else {\n    const output = getSupportedFunction(supportedPlatforms, getter, () => defaultValue)();\n    if (memoKey) {\n      memo[memoKey] = output;\n    }\n    return output;\n  }\n}\n\n/**\n * function used to get desired info asynchronously — with optional memoization\n * @param param0\n */\nexport async function getSupportedPlatformInfoAsync<T>({\n  getter,\n  supportedPlatforms,\n  defaultValue,\n  memoKey,\n}: GetSupportedPlatformInfoAsyncParams<T>): Promise<T> {\n  if (memoKey && memo[memoKey] != undefined) {\n    return memo[memoKey];\n  } else {\n    const output = await getSupportedFunction(supportedPlatforms, getter, () =>\n      Promise.resolve(defaultValue)\n    )();\n    if (memoKey) {\n      memo[memoKey] = output;\n    }\n\n    return output;\n  }\n}\n\n/**\n * function that returns array of getter functions [async, sync]\n * @param param0\n */\nexport function getSupportedPlatformInfoFunctions<T>({\n  syncGetter,\n  ...asyncParams\n}: GetSupportedPlatformInfoFunctionsParams<T>): [Getter<Promise<T>>, Getter<T>] {\n  return [\n    () => getSupportedPlatformInfoAsync(asyncParams),\n    () => getSupportedPlatformInfoSync({ ...asyncParams, getter: syncGetter }),\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}