{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React from'react';import TextInputIcon,{IconAdornment}from\"./TextInputIcon\";import TextInputAffix,{AffixAdornment}from\"./TextInputAffix\";import{ADORNMENT_OFFSET,OUTLINED_INPUT_OFFSET}from\"../constants\";import{AdornmentSide,AdornmentType,InputMode}from\"./enums\";export function getAdornmentConfig(_ref){var left=_ref.left,right=_ref.right;var adornmentConfig=[];if(left||right){[{side:AdornmentSide.Left,adornment:left},{side:AdornmentSide.Right,adornment:right}].forEach(function(_ref2){var side=_ref2.side,adornment=_ref2.adornment;if(adornment&&React.isValidElement(adornment)){var type;if(adornment.type===TextInputAffix){type=AdornmentType.Affix;}else if(adornment.type===TextInputIcon){type=AdornmentType.Icon;}adornmentConfig.push({side:side,type:type});}});}return adornmentConfig;}export function getAdornmentStyleAdjustmentForNativeInput(_ref3){var adornmentConfig=_ref3.adornmentConfig,leftAffixWidth=_ref3.leftAffixWidth,rightAffixWidth=_ref3.rightAffixWidth,paddingHorizontal=_ref3.paddingHorizontal,_ref3$inputOffset=_ref3.inputOffset,inputOffset=_ref3$inputOffset===void 0?0:_ref3$inputOffset,mode=_ref3.mode;if(adornmentConfig.length){var adornmentStyleAdjustmentForNativeInput=adornmentConfig.map(function(_ref4){var _ref7;var type=_ref4.type,side=_ref4.side;var isLeftSide=side===AdornmentSide.Left;var inputModeAdornemntOffset=mode===InputMode.Outlined?ADORNMENT_OFFSET+OUTLINED_INPUT_OFFSET:ADORNMENT_OFFSET;var paddingKey=\"padding\"+captalize(side);var affixWidth=isLeftSide?leftAffixWidth:rightAffixWidth;var padding=typeof paddingHorizontal==='number'?paddingHorizontal:inputModeAdornemntOffset;var offset=affixWidth+padding;var isAffix=type===AdornmentType.Affix;var marginKey=\"margin\"+captalize(side);return _ref7={},_defineProperty(_ref7,marginKey,isAffix?0:offset),_defineProperty(_ref7,paddingKey,isAffix?offset:inputOffset),_ref7;});var allStyleAdjustmentsMerged=adornmentStyleAdjustmentForNativeInput.reduce(function(mergedStyles,currentStyle){return _objectSpread(_objectSpread({},mergedStyles),currentStyle);},{});return allStyleAdjustmentsMerged;}else{return[{}];}}var captalize=function captalize(text){return text.charAt(0).toUpperCase()+text.slice(1);};var TextInputAdornment=function TextInputAdornment(_ref5){var adornmentConfig=_ref5.adornmentConfig,left=_ref5.left,right=_ref5.right,onAffixChange=_ref5.onAffixChange,textStyle=_ref5.textStyle,visible=_ref5.visible,topPosition=_ref5.topPosition,isTextInputFocused=_ref5.isTextInputFocused,forceFocus=_ref5.forceFocus,paddingHorizontal=_ref5.paddingHorizontal,maxFontSizeMultiplier=_ref5.maxFontSizeMultiplier;if(adornmentConfig.length){return React.createElement(React.Fragment,null,adornmentConfig.map(function(_ref6){var type=_ref6.type,side=_ref6.side;var inputAdornmentComponent;if(side===AdornmentSide.Left){inputAdornmentComponent=left;}else if(side===AdornmentSide.Right){inputAdornmentComponent=right;}var commonProps={key:side,side:side,testID:side+\"-\"+type+\"-adornment\",isTextInputFocused:isTextInputFocused,paddingHorizontal:paddingHorizontal};if(type===AdornmentType.Icon){return React.createElement(IconAdornment,_extends({},commonProps,{icon:inputAdornmentComponent,topPosition:topPosition[AdornmentType.Icon],forceFocus:forceFocus}));}else if(type===AdornmentType.Affix){return React.createElement(AffixAdornment,_extends({},commonProps,{topPosition:topPosition[AdornmentType.Affix][side],affix:inputAdornmentComponent,textStyle:textStyle,onLayout:onAffixChange[side],visible:visible,maxFontSizeMultiplier:maxFontSizeMultiplier}));}else{return null;}}));}else{return null;}};export default TextInputAdornment;","map":{"version":3,"sources":["TextInputAdornment.tsx"],"names":["right","adornmentConfig","left","side","AdornmentSide","adornment","React","type","AdornmentType","inputOffset","mode","adornmentStyleAdjustmentForNativeInput","isLeftSide","inputModeAdornemntOffset","InputMode","ADORNMENT_OFFSET","paddingKey","captalize","affixWidth","padding","offset","isAffix","marginKey","allStyleAdjustmentsMerged","currentStyle","text","TextInputAdornment","maxFontSizeMultiplier","inputAdornmentComponent","commonProps","key","testID","isTextInputFocused","paddingHorizontal","topPosition","forceFocus","onAffixChange"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport { ADORNMENT_OFFSET, OUTLINED_INPUT_OFFSET } from '../constants';\nimport type {\n  LayoutChangeEvent,\n  TextStyle,\n  StyleProp,\n  Animated,\n} from 'react-native';\nimport type {\n  AdornmentConfig,\n  AdornmentStyleAdjustmentForNativeInput,\n} from './types';\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\n\nexport function getAdornmentConfig({\n  left,\n  right,\n}: {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}): Array<AdornmentConfig> {\n  let adornmentConfig: any[] = [];\n  if (left || right) {\n    [\n      { side: AdornmentSide.Left, adornment: left },\n      { side: AdornmentSide.Right, adornment: right },\n    ].forEach(({ side, adornment }) => {\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type,\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  paddingHorizontal,\n  inputOffset = 0,\n  mode,\n}: {\n  inputOffset?: number;\n  adornmentConfig: AdornmentConfig[];\n  leftAffixWidth: number;\n  rightAffixWidth: number;\n  mode?: 'outlined' | 'flat';\n  paddingHorizontal?: number | string;\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n      ({ type, side }: AdornmentConfig) => {\n        const isLeftSide = side === AdornmentSide.Left;\n        const inputModeAdornemntOffset =\n          mode === InputMode.Outlined\n            ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET\n            : ADORNMENT_OFFSET;\n        const paddingKey = `padding${captalize(side)}`;\n        const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n        const padding =\n          typeof paddingHorizontal === 'number'\n            ? paddingHorizontal\n            : inputModeAdornemntOffset;\n        const offset = affixWidth + padding;\n\n        const isAffix = type === AdornmentType.Affix;\n        const marginKey = `margin${captalize(side)}`;\n\n        return {\n          [marginKey]: isAffix ? 0 : offset,\n          [paddingKey]: isAffix ? offset : inputOffset,\n        };\n      }\n    );\n    const allStyleAdjustmentsMerged =\n      adornmentStyleAdjustmentForNativeInput.reduce(\n        (mergedStyles, currentStyle) => {\n          return {\n            ...mergedStyles,\n            ...currentStyle,\n          };\n        },\n        {}\n      );\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n  forceFocus: () => void;\n  adornmentConfig: AdornmentConfig[];\n  topPosition: {\n    [AdornmentType.Affix]: {\n      [AdornmentSide.Left]: number | null;\n      [AdornmentSide.Right]: number | null;\n    };\n    [AdornmentType.Icon]: number;\n  };\n  onAffixChange: {\n    [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n    [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n  };\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  textStyle?: StyleProp<TextStyle>;\n  visible?: Animated.Value;\n  isTextInputFocused: boolean;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n}) => {\n  if (adornmentConfig.length) {\n    return (\n      <>\n        {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n          let inputAdornmentComponent;\n          if (side === AdornmentSide.Left) {\n            inputAdornmentComponent = left;\n          } else if (side === AdornmentSide.Right) {\n            inputAdornmentComponent = right;\n          }\n\n          const commonProps = {\n            key: side,\n            side: side,\n            testID: `${side}-${type}-adornment`,\n            isTextInputFocused,\n            paddingHorizontal,\n          };\n          if (type === AdornmentType.Icon) {\n            return (\n              <IconAdornment\n                {...commonProps}\n                icon={inputAdornmentComponent}\n                topPosition={topPosition[AdornmentType.Icon]}\n                forceFocus={forceFocus}\n              />\n            );\n          } else if (type === AdornmentType.Affix) {\n            return (\n              <AffixAdornment\n                {...commonProps}\n                topPosition={topPosition[AdornmentType.Affix][side]}\n                affix={inputAdornmentComponent}\n                textStyle={textStyle}\n                onLayout={onAffixChange[side]}\n                visible={visible}\n                maxFontSizeMultiplier={maxFontSizeMultiplier}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n"]},"metadata":{},"sourceType":"module"}