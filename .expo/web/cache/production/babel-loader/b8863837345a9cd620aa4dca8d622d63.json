{"ast":null,"code":"import processColor from\"react-native-web/dist/exports/processColor\";var isWebColor=function isWebColor(color){return color==='currentcolor'||color==='currentColor'||color==='inherit'||color.indexOf('var(')===0;};export function normalizeColor(color){var opacity=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;if(color==null)return;if(typeof color==='string'&&isWebColor(color)){return color;}var colorInt=processColor(color);if(colorInt!=null){var r=colorInt>>16&255;var g=colorInt>>8&255;var b=colorInt&255;var a=(colorInt>>24&255)/255;var alpha=(a*opacity).toFixed(2);return\"rgba(\"+r+\",\"+g+\",\"+b+\",\"+alpha+\")\";}}","map":{"version":3,"sources":["../src/normalizeColor.ts"],"names":[],"mappings":"qEASA,GAAM,CAAA,UAAU,CAAG,QAAb,CAAA,UAAa,CAAC,KAAD,QACjB,CAAA,KAAK,GAAK,cAAV,EACA,KAAK,GAAK,cADV,EAEA,KAAK,GAAK,SAFV,EAGA,KAAK,CAAC,OAAN,CAAc,MAAd,IAA0B,CAJT,EAAnB,CAMA,MAAM,SAAU,CAAA,cAAV,CAAyB,KAAzB,CAAqE,IAAnB,CAAA,OAAmB,2DAAD,CAAC,CACzE,GAAI,KAAK,EAAI,IAAb,CAAmB,OAEnB,GAAI,MAAO,CAAA,KAAP,GAAiB,QAAjB,EAA6B,UAAU,CAAC,KAAD,CAA3C,CAAoD,CAClD,MAAO,CAAA,KAAP,CACD,CAED,GAAM,CAAA,QAAQ,CAAG,YAAY,CAAC,KAAD,CAA7B,CACA,GAAI,QAAQ,EAAI,IAAhB,CAAsB,CACpB,GAAM,CAAA,CAAC,CAAI,QAAQ,EAAI,EAAb,CAAmB,GAA7B,CACA,GAAM,CAAA,CAAC,CAAI,QAAQ,EAAI,CAAb,CAAkB,GAA5B,CACA,GAAM,CAAA,CAAC,CAAG,QAAQ,CAAG,GAArB,CACA,GAAM,CAAA,CAAC,CAAG,CAAE,QAAQ,EAAI,EAAb,CAAmB,GAApB,EAA2B,GAArC,CACA,GAAM,CAAA,KAAK,CAAG,CAAC,CAAC,CAAG,OAAL,EAAc,OAAd,CAAsB,CAAtB,CAAd,CACA,cAAe,CAAf,KAAoB,CAApB,KAAyB,CAAzB,KAA8B,KAA9B,KACD,CACF","sourcesContent":["/**\n * Copyright (c) Expo.\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { processColor } from 'react-native';\n\nconst isWebColor = (color: string): boolean =>\n  color === 'currentcolor' ||\n  color === 'currentColor' ||\n  color === 'inherit' ||\n  color.indexOf('var(') === 0;\n\nexport function normalizeColor(color?: number | string, opacity: number = 1): void | string {\n  if (color == null) return;\n\n  if (typeof color === 'string' && isWebColor(color)) {\n    return color;\n  }\n\n  const colorInt = processColor(color) as number | undefined;\n  if (colorInt != null) {\n    const r = (colorInt >> 16) & 255;\n    const g = (colorInt >> 8) & 255;\n    const b = colorInt & 255;\n    const a = ((colorInt >> 24) & 255) / 255;\n    const alpha = (a * opacity).toFixed(2);\n    return `rgba(${r},${g},${b},${alpha})`;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}