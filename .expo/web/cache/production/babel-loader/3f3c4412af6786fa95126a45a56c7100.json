{"ast":null,"code":"import color from'color';import Animated from\"react-native-web/dist/exports/Animated\";import DarkTheme from\"./DarkTheme\";var isAnimatedValue=function isAnimatedValue(it){return it instanceof Animated.Value;};export default function overlay(elevation){var surfaceColor=arguments.length>1&&arguments[1]!==undefined?arguments[1]:DarkTheme.colors.surface;if(isAnimatedValue(elevation)){var inputRange=[0,1,2,3,8,24];return elevation.interpolate({inputRange:inputRange,outputRange:inputRange.map(function(elevation){return calculateColor(surfaceColor,elevation);})});}return calculateColor(surfaceColor,elevation);}function calculateColor(surfaceColor){var elevation=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;var overlayTransparency;if(elevation>=1&&elevation<=24){overlayTransparency=elevationOverlayTransparency[elevation];}else if(elevation>24){overlayTransparency=elevationOverlayTransparency[24];}else{overlayTransparency=elevationOverlayTransparency[1];}return color(surfaceColor).mix(color('white'),overlayTransparency*0.01).hex();}var elevationOverlayTransparency={1:5,2:7,3:8,4:9,5:10,6:11,7:11.5,8:12,9:12.5,10:13,11:13.5,12:14,13:14.25,14:14.5,15:14.75,16:15,17:15.12,18:15.24,19:15.36,20:15.48,21:15.6,22:15.72,23:15.84,24:16};","map":{"version":3,"sources":["overlay.tsx"],"names":["isAnimatedValue","it","Animated","surfaceColor","DarkTheme","surface","inputRange","outputRange","elevation","calculateColor","overlayTransparency","elevationOverlayTransparency","color"],"mappings":"AAAA,MAAA,CAAA,KAAA,KAAA,OAAA,C,6DAEA,MAAA,CAAA,SAAA,mBAEA,GAAMA,CAAAA,eAAe,CACnBC,QADID,CAAAA,eACJC,CAAAA,EADsB,QAEGA,CAAAA,EAAE,WAAYC,CAAAA,QAAQ,CAFjD,KAAwB,EAAxB,CAIA,cAAe,SAAA,CAAA,OAAA,CAAA,SAAA,CAG+C,CAAA,GAD5DC,CAAAA,YAC4D,CAAA,SAAA,CAAA,MAAA,CAAA,CAAA,EAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CADrCC,SAAS,CAATA,MAAAA,CAAiBC,OACoB,CAC5D,GAAIL,eAAe,CAAnB,SAAmB,CAAnB,CAAgC,CAC9B,GAAMM,CAAAA,UAAU,CAAG,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CADW,EACX,CAAnB,CAGA,MAAO,CAAA,SAAS,CAAT,WAAA,CAAsB,CAC3BA,UAD2B,CAC3BA,UAD2B,CAE3BC,WAAW,CAAE,UAAU,CAAV,GAAA,CAAgBC,SAAAA,SAAD,CAAe,CACzC,MAAOC,CAAAA,cAAc,CAAA,YAAA,CAArB,SAAqB,CAArB,CADW,CAAA,CAFc,CAAtB,CAAP,CAL0D,CAc5D,MAAOA,CAAAA,cAAc,CAAA,YAAA,CAArB,SAAqB,CAArB,CACD,CAED,QAAA,CAAA,cAAA,CAAA,YAAA,CAAqE,CAAA,GAAvBD,CAAAA,SAAuB,CAAA,SAAA,CAAA,MAAA,CAAA,CAAA,EAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAH,CAAG,CACnE,GAAA,CAAA,mBAAA,CACA,GAAIA,SAAS,EAATA,CAAAA,EAAkBA,SAAS,EAA/B,EAAA,CAAuC,CACrCE,mBAAmB,CAAGC,4BAA4B,CAAlDD,SAAkD,CAAlDA,CADF,CAAA,IAEO,IAAIF,SAAS,CAAb,EAAA,CAAoB,CACzBE,mBAAmB,CAAGC,4BAA4B,CAAlDD,EAAkD,CAAlDA,CADK,CAAA,IAEA,CACLA,mBAAmB,CAAGC,4BAA4B,CAAlDD,CAAkD,CAAlDA,CACD,CACD,MAAOE,CAAAA,KAAK,CAALA,YAAK,CAALA,CAAAA,GAAAA,CACAA,KAAK,CADLA,OACK,CADLA,CACgBF,mBAAmB,CADnCE,IAAAA,EAAP,GAAOA,EAAP,CAGD,CAED,GAAMD,CAAAA,4BAAoD,CAAG,CAC3D,EAD2D,CAAA,CAE3D,EAF2D,CAAA,CAG3D,EAH2D,CAAA,CAI3D,EAJ2D,CAAA,CAK3D,EAL2D,EAAA,CAM3D,EAN2D,EAAA,CAO3D,EAP2D,IAAA,CAQ3D,EAR2D,EAAA,CAS3D,EAT2D,IAAA,CAU3D,GAV2D,EAAA,CAW3D,GAX2D,IAAA,CAY3D,GAZ2D,EAAA,CAa3D,GAb2D,KAAA,CAc3D,GAd2D,IAAA,CAe3D,GAf2D,KAAA,CAgB3D,GAhB2D,EAAA,CAiB3D,GAjB2D,KAAA,CAkB3D,GAlB2D,KAAA,CAmB3D,GAnB2D,KAAA,CAoB3D,GApB2D,KAAA,CAqB3D,GArB2D,IAAA,CAsB3D,GAtB2D,KAAA,CAuB3D,GAvB2D,KAAA,CAwB3D,GAAI,EAxBuD,CAA7D","sourcesContent":["import color from 'color';\nimport { Animated } from 'react-native';\nimport DarkTheme from './DarkTheme';\n\nconst isAnimatedValue = (\n  it: number | Animated.AnimatedInterpolation\n): it is Animated.Value => it instanceof Animated.Value;\n\nexport default function overlay<T extends Animated.Value | number>(\n  elevation: T,\n  surfaceColor: string = DarkTheme.colors.surface\n): T extends number ? string : Animated.AnimatedInterpolation {\n  if (isAnimatedValue(elevation)) {\n    const inputRange = [0, 1, 2, 3, 8, 24];\n\n    // @ts-expect-error: TS doesn't seem to refine the type correctly\n    return elevation.interpolate({\n      inputRange,\n      outputRange: inputRange.map((elevation) => {\n        return calculateColor(surfaceColor, elevation);\n      }),\n    });\n  }\n\n  // @ts-expect-error: TS doesn't seem to refine the type correctly\n  return calculateColor(surfaceColor, elevation);\n}\n\nfunction calculateColor(surfaceColor: string, elevation: number = 1) {\n  let overlayTransparency: number;\n  if (elevation >= 1 && elevation <= 24) {\n    overlayTransparency = elevationOverlayTransparency[elevation];\n  } else if (elevation > 24) {\n    overlayTransparency = elevationOverlayTransparency[24];\n  } else {\n    overlayTransparency = elevationOverlayTransparency[1];\n  }\n  return color(surfaceColor)\n    .mix(color('white'), overlayTransparency * 0.01)\n    .hex();\n}\n\nconst elevationOverlayTransparency: Record<string, number> = {\n  1: 5,\n  2: 7,\n  3: 8,\n  4: 9,\n  5: 10,\n  6: 11,\n  7: 11.5,\n  8: 12,\n  9: 12.5,\n  10: 13,\n  11: 13.5,\n  12: 14,\n  13: 14.25,\n  14: 14.5,\n  15: 14.75,\n  16: 15,\n  17: 15.12,\n  18: 15.24,\n  19: 15.36,\n  20: 15.48,\n  21: 15.6,\n  22: 15.72,\n  23: 15.84,\n  24: 16,\n};\n"]},"metadata":{},"sourceType":"module"}