{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"style\",\"theme\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import NativeText from\"react-native-web/dist/exports/Text\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import{withTheme}from\"../../core/theming\";var Text=function Text(_ref,ref){var style=_ref.style,theme=_ref.theme,rest=_objectWithoutProperties(_ref,_excluded);var root=React.useRef(null);React.useImperativeHandle(ref,function(){return{setNativeProps:function setNativeProps(args){var _root$current;return(_root$current=root.current)===null||_root$current===void 0?void 0:_root$current.setNativeProps(args);}};});return React.createElement(NativeText,_extends({},rest,{ref:root,style:[_objectSpread(_objectSpread({},theme.fonts.regular),{},{color:theme.colors.text}),styles.text,style]}));};var styles=StyleSheet.create({text:{textAlign:'left'}});export default withTheme(React.forwardRef(Text));","map":{"version":3,"sources":["Text.tsx"],"names":["Text","rest","root","React","setNativeProps","args","theme","color","text","styles","textAlign","withTheme"],"mappings":"otCAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,4HAOA,OAAA,SAAA,0BAiBA,GAAMA,CAAAA,IAA6C,CAAG,QAAhDA,CAAAA,IAAgD,CAAA,IAAA,CAAA,GAAA,CAGjD,CAFH,GAAA,CAAA,KAAA,CAEG,IAFH,CAAA,KAAA,CAAA,KAAA,CAEG,IAFH,CAAA,KAAA,CAAmBC,IAAnB,0BAEG,IAFH,YAGA,GAAMC,CAAAA,IAAI,CAAGC,KAAK,CAALA,MAAAA,CAAb,IAAaA,CAAb,CAEAA,KAAK,CAALA,mBAAAA,CAAAA,GAAAA,CAA+B,iBAAO,CACpCC,cAAc,CAAGC,wBAAAA,IAAD,CAAA,CAAA,GAAA,CAAA,aAAA,CAAA,MAAA,CAAA,aAAA,CAAkBH,IAAI,CAAtB,OAAA,IAAA,IAAA,EAAA,aAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAkBA,aAAAA,CAAAA,cAAAA,CAAlB,IAAkBA,CAAlB,CAAA,CADoB,CAAP,EAA/BC,EAIA,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,UAAA,CAAA,QAAA,CAAA,EAAA,CAAA,IAAA,CAAA,CAEE,GAAG,CAFL,IAAA,CAGE,KAAK,CAAE,gCAEAG,KAAK,CAALA,KAAAA,CADL,OADK,MAGHC,KAAK,CAAED,KAAK,CAALA,MAAAA,CAAaE,IAHjB,GAKLC,MAAM,CALD,IAAA,CAAA,KAAA,CAHT,CAAA,CAAA,CADF,CAVF,CAAA,CA0BA,GAAMA,CAAAA,MAAM,CAAG,UAAU,CAAV,MAAA,CAAkB,CAC/BD,IAAI,CAAE,CACJE,SAAS,CAAE,MADP,CADyB,CAAlB,CAAf,CAMA,cAAeC,CAAAA,SAAS,CAACR,KAAK,CAALA,UAAAA,CAAzB,IAAyBA,CAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  Text as NativeText,\n  TextStyle,\n  StyleProp,\n  StyleSheet,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentProps<typeof NativeText> & {\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n// @component-group Typography\n\n/**\n * Text component which follows styles from the theme.\n *\n * @extends Text props https://reactnative.dev/docs/text#props\n */\nconst Text: React.RefForwardingComponent<{}, Props> = (\n  { style, theme, ...rest }: Props,\n  ref\n) => {\n  const root = React.useRef<NativeText | null>(null);\n\n  React.useImperativeHandle(ref, () => ({\n    setNativeProps: (args: Object) => root.current?.setNativeProps(args),\n  }));\n\n  return (\n    <NativeText\n      {...rest}\n      ref={root}\n      style={[\n        {\n          ...theme.fonts.regular,\n          color: theme.colors.text,\n        },\n        styles.text,\n        style,\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    textAlign: 'left',\n  },\n});\n\nexport default withTheme(React.forwardRef(Text));\n"]},"metadata":{},"sourceType":"module"}