{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport { Title, Card, Text } from 'react-native-paper';\nimport Header from \"./Header\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar windowSize = Dimensions.get('window');\n\nvar Help = function (_React$Component) {\n  _inherits(Help, _React$Component);\n\n  var _super = _createSuper(Help);\n\n  function Help() {\n    _classCallCheck(this, Help);\n\n    return _super.call(this);\n  }\n\n  _createClass(Help, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return _jsxs(Card, {\n        style: {\n          flex: 1,\n          backgroundColor: 'white'\n        },\n        children: [_jsx(Header, {\n          showBack: true,\n          onBackPress: function onBackPress() {\n            return _this.props.navigation.navigate(\"Main\");\n          },\n          title: 'Help'\n        }), _jsxs(Card.Content, {\n          style: {\n            marginTop: 40,\n            flex: 1,\n            paddingHorizontal: 7\n          },\n          children: [_jsx(Text, {\n            style: {\n              fontSize: 13,\n              color: 'black'\n            },\n            children: \"MaxWord is for busy word game lovers who might only have a few minutes. Make words with the letters given; correct words remove letters. Make as many words as you can before all the tiles fill up. A letter can be used more than once per word, and longer words score higher; \\u201Cbanana\\u201D scores double what \\u201Cban\\u201D would.\"\n          }), _jsx(Title, {\n            style: {\n              fontSize: 14,\n              fontWeight: 'bold'\n            },\n            children: \"Levels\"\n          }), _jsx(Text, {\n            children: \"Beginner (3 seconds between letters, 7 seconds after tiles fill up), Intermediate (2s/5s), Advanced (1s/3s), and Pro (0.5s/2s)\"\n          }), _jsx(Title, {\n            style: {\n              fontSize: 14,\n              fontWeight: 'bold'\n            },\n            children: \"Word Scoring Formula\"\n          }), _jsx(Text, {\n            style: {\n              fontSize: 13\n            },\n            children: \"The number of letters in a correct word multiplied by the level (Beginner=1, Intermediate=2, Advanced=3, Pro=4)\"\n          }), _jsx(Title, {\n            style: {\n              fontSize: 14,\n              fontWeight: 'bold'\n            },\n            children: \"Posting Scores\"\n          }), _jsx(Text, {\n            style: {\n              fontSize: 13\n            },\n            children: \"User will have the option of posting high scores to our server.\"\n          }), _jsx(Text, {\n            style: {\n              fontSize: 13,\n              marginTop: 40\n            },\n            children: \"Feedback, suggestions, complaints, missing words? Please send an email to\"\n          }), _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              Linking.openURL('mailto:maxword@vimware.com');\n            },\n            title: \"maxword@vimware.com\",\n            children: _jsx(Text, {\n              style: {\n                color: 'blue',\n                textDecorationLine: 'underline'\n              },\n              children: \"maxword@vimware.com\"\n            })\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return Help;\n}(React.Component);\n\n;\nexport default Help;","map":{"version":3,"names":["React","Title","Card","Text","Header","windowSize","Dimensions","get","Help","flex","backgroundColor","props","navigation","navigate","marginTop","paddingHorizontal","fontSize","color","fontWeight","Linking","openURL","textDecorationLine","Component"],"sources":["/Users/ecorfytechnologies/jagadish/GitHub/maxwordu/src/components/Help.js"],"sourcesContent":["import React from 'react';\nimport {\n  View,\n  StyleSheet,\n  Image,\n  TextInput,\n  TouchableOpacity,\n  TouchableHighlight,\n  Alert,\n  ScrollView,\n  Dimensions,\n  Linking\n} from 'react-native'\n// var Dimensions = require('Dimensions');\nimport { Title, Card, Text } from 'react-native-paper';\nimport Header from './Header';\n\n// import { GoogleAnalyticsTracker } from 'react-native-google-analytics-bridge';\n// let tracker = new GoogleAnalyticsTracker('UA-86654723-1');\n// tracker.trackScreenView('Help');\n\nvar windowSize = Dimensions.get('window');\n// var {\n//   ListView,\n//   WebView\n// } = React;\n\nclass Help extends React.Component {\n  constructor() {\n    super();\n   \n  }\n  \n  render() {\n    return (\n      <Card style={{ flex: 1 ,backgroundColor:'white'}}>\n        <Header\n          showBack\n          onBackPress={() => this.props.navigation.navigate(\"Main\")}\n          title={'Help'}\n        />\n        <Card.Content style={{ marginTop: 40, flex: 1, paddingHorizontal:7, }}>\n          <Text style={{ fontSize: 13,color:'black' }}>\n          MaxWord is for busy word game lovers who might only have a few minutes. Make words with the letters given; correct words remove letters. Make as many words as you can before all the tiles fill up. A letter can be used more than once per word, and longer words score higher; “banana” scores double what “ban” would.\n          </Text>\n         \n          <Title style={{ fontSize: 14, fontWeight:'bold' }}>Levels</Title>\n          <Text>\n          Beginner (3 seconds between letters, 7 seconds after tiles fill up), Intermediate (2s/5s), Advanced (1s/3s), and Pro (0.5s/2s)\n\n          </Text>\n          <Title style={{ fontSize: 14, fontWeight:'bold' }}>Word Scoring Formula\n          </Title>\n          <Text style={{ fontSize: 13 }}>\n          The number of letters in a correct word multiplied by the level (Beginner=1, Intermediate=2, Advanced=3, Pro=4)\n\n          </Text>\n          <Title style={{ fontSize: 14, fontWeight:'bold' }}>Posting Scores</Title>\n          <Text style={{ fontSize: 13 }}>\n          User will have the option of posting high scores to our server.\n\n          </Text>\n          <Text style={{ fontSize: 13, marginTop:40 }}>\n          Feedback, suggestions, complaints, missing words? Please send an email to\n          </Text>\n        \n                <TouchableOpacity onPress={() => {\n                  Linking.openURL('mailto:maxword@vimware.com') \n                }}\n                title=\"maxword@vimware.com\"\n                >\n                  <Text style={{ color: 'blue', textDecorationLine: 'underline' }}>\n                  maxword@vimware.com\n                  </Text>\n                </TouchableOpacity>\n        </Card.Content>\n        \n      </Card>\n    );\n  }\n};\n\n\nexport default  Help"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;;;;;;AAcA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,IAAtB,QAAkC,oBAAlC;AACA,OAAOC,MAAP;;;AAMA,IAAIC,UAAU,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,CAAjB;;IAMMC,I;;;;;EACJ,gBAAc;IAAA;;IAAA;EAGb;;;;WAED,kBAAS;MAAA;;MACP,OACE,MAAC,IAAD;QAAM,KAAK,EAAE;UAAEC,IAAI,EAAE,CAAR;UAAWC,eAAe,EAAC;QAA3B,CAAb;QAAA,WACE,KAAC,MAAD;UACE,QAAQ,MADV;UAEE,WAAW,EAAE;YAAA,OAAM,KAAI,CAACC,KAAL,CAAWC,UAAX,CAAsBC,QAAtB,CAA+B,MAA/B,CAAN;UAAA,CAFf;UAGE,KAAK,EAAE;QAHT,EADF,EAME,MAAC,IAAD,CAAM,OAAN;UAAc,KAAK,EAAE;YAAEC,SAAS,EAAE,EAAb;YAAiBL,IAAI,EAAE,CAAvB;YAA0BM,iBAAiB,EAAC;UAA5C,CAArB;UAAA,WACE,KAAC,IAAD;YAAM,KAAK,EAAE;cAAEC,QAAQ,EAAE,EAAZ;cAAeC,KAAK,EAAC;YAArB,CAAb;YAAA;UAAA,EADF,EAKE,KAAC,KAAD;YAAO,KAAK,EAAE;cAAED,QAAQ,EAAE,EAAZ;cAAgBE,UAAU,EAAC;YAA3B,CAAd;YAAA;UAAA,EALF,EAME,KAAC,IAAD;YAAA;UAAA,EANF,EAUE,KAAC,KAAD;YAAO,KAAK,EAAE;cAAEF,QAAQ,EAAE,EAAZ;cAAgBE,UAAU,EAAC;YAA3B,CAAd;YAAA;UAAA,EAVF,EAYE,KAAC,IAAD;YAAM,KAAK,EAAE;cAAEF,QAAQ,EAAE;YAAZ,CAAb;YAAA;UAAA,EAZF,EAgBE,KAAC,KAAD;YAAO,KAAK,EAAE;cAAEA,QAAQ,EAAE,EAAZ;cAAgBE,UAAU,EAAC;YAA3B,CAAd;YAAA;UAAA,EAhBF,EAiBE,KAAC,IAAD;YAAM,KAAK,EAAE;cAAEF,QAAQ,EAAE;YAAZ,CAAb;YAAA;UAAA,EAjBF,EAqBE,KAAC,IAAD;YAAM,KAAK,EAAE;cAAEA,QAAQ,EAAE,EAAZ;cAAgBF,SAAS,EAAC;YAA1B,CAAb;YAAA;UAAA,EArBF,EAyBQ,KAAC,gBAAD;YAAkB,OAAO,EAAE,mBAAM;cAC/BK,OAAO,CAACC,OAAR,CAAgB,4BAAhB;YACD,CAFD;YAGA,KAAK,EAAC,qBAHN;YAAA,UAKE,KAAC,IAAD;cAAM,KAAK,EAAE;gBAAEH,KAAK,EAAE,MAAT;gBAAiBI,kBAAkB,EAAE;cAArC,CAAb;cAAA;YAAA;UALF,EAzBR;QAAA,EANF;MAAA,EADF;IA6CD;;;;EApDgBrB,KAAK,CAACsB,S;;AAqDxB;AAGD,eAAgBd,IAAhB"},"metadata":{},"sourceType":"module"}