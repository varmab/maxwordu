{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState, useEffect } from 'react';\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nexport function useOnMount(asyncGetter, initialResult) {\n  var _useState = useState({\n    loading: true,\n    result: initialResult\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      response = _useState2[0],\n      setResponse = _useState2[1];\n\n  useEffect(function () {\n    var getAsync = function _callee() {\n      var result;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(asyncGetter());\n\n            case 2:\n              result = _context.sent;\n              setResponse({\n                loading: false,\n                result: result\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getAsync();\n  }, [asyncGetter]);\n  return response;\n}\nexport var deviceInfoEmitter = new NativeEventEmitter(NativeModules.RNDeviceInfo);\nexport function useOnEvent(eventName, initialValueAsyncGetter, defaultValue) {\n  var _useOnMount = useOnMount(initialValueAsyncGetter, defaultValue),\n      loading = _useOnMount.loading,\n      initialResult = _useOnMount.result;\n\n  var _useState3 = useState(defaultValue),\n      _useState4 = _slicedToArray(_useState3, 2),\n      result = _useState4[0],\n      setResult = _useState4[1];\n\n  useEffect(function () {\n    setResult(initialResult);\n  }, [initialResult]);\n  useEffect(function () {\n    var subscription = deviceInfoEmitter.addListener(eventName, setResult);\n    return function () {\n      return subscription.remove();\n    };\n  }, [eventName]);\n  return {\n    loading: loading,\n    result: result\n  };\n}","map":{"version":3,"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AASA,OAAO,SAASC,UAAT,CAAuBC,WAAvB,EAAsDC,aAAtD,EAA4F;EACjG,gBAAgCJ,QAAQ,CAAqB;IAC3DK,OAAO,EAAE,IADkD;IAE3DC,MAAM,EAAEF;EAFmD,CAArB,CAAxC;EAAA;EAAA,IAAOG,QAAP;EAAA,IAAiBC,WAAjB;;EAKAP,SAAS,CAAC,YAAM;IAEd,IAAMQ,QAAQ,GAAG;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,iCACMN,WAAW,EADjB;;YAAA;cACTG,MADS;cAEfE,WAAW,CAAC;gBAAEH,OAAO,EAAE,KAAX;gBAAkBC;cAAlB,CAAD,CAAXE;;YAFe;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAjB;;IAKAC,QAAQ;EAPD,GAQN,CAACN,WAAD,CARM,CAATF;EAUA,OAAOM,QAAP;AACD;AAED,OAAO,IAAMG,iBAAiB,GAAG,IAAIC,kBAAJ,CAAuBC,aAAa,CAACC,YAArC,CAA1B;AAQP,OAAO,SAASC,UAAT,CACLC,SADK,EAELC,uBAFK,EAGLC,YAHK,EAIe;EACpB,kBAA2Cf,UAAU,CAACc,uBAAD,EAA0BC,YAA1B,CAArD;EAAA,IAAQZ,OAAR,eAAQA,OAAR;EAAA,IAAyBD,aAAzB,eAAiBE,MAAjB;;EACA,iBAA4BN,QAAQ,CAAIiB,YAAJ,CAApC;EAAA;EAAA,IAAOX,MAAP;EAAA,IAAeY,SAAf;;EAGAjB,SAAS,CAAC,YAAM;IACdiB,SAAS,CAACd,aAAD,CAATc;EADO,GAEN,CAACd,aAAD,CAFM,CAATH;EAMAA,SAAS,CAAC,YAAM;IACd,IAAMkB,YAAY,GAAGT,iBAAiB,CAACU,WAAlBV,CAA8BK,SAA9BL,EAAyCQ,SAAzCR,CAArB;IACA,OAAO;MAAA,OAAMS,YAAY,CAACE,MAAbF,EAAN;IAAA,CAAP;EAFO,GAGN,CAACJ,SAAD,CAHM,CAATd;EAMA,OAAO;IAAEI,OAAF,EAAEA,OAAF;IAAWC;EAAX,CAAP;AACD","names":["useState","useEffect","useOnMount","asyncGetter","initialResult","loading","result","response","setResponse","getAsync","deviceInfoEmitter","NativeEventEmitter","NativeModules","RNDeviceInfo","useOnEvent","eventName","initialValueAsyncGetter","defaultValue","setResult","subscription","addListener","remove"],"sources":["asyncHookWrappers.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { NativeEventEmitter, NativeModules } from 'react-native';\nimport type { AsyncHookResult } from './types';\n\n/**\n * simple hook wrapper for async functions for 'on-mount / componentDidMount' that only need to fired once\n * @param asyncGetter async function that 'gets' something\n * @param initialResult -1 | false | 'unknown'\n */\nexport function useOnMount<T>(asyncGetter: () => Promise<T>, initialResult: T): AsyncHookResult<T> {\n  const [response, setResponse] = useState<AsyncHookResult<T>>({\n    loading: true,\n    result: initialResult,\n  });\n\n  useEffect(() => {\n    // async function cuz react complains if useEffect's effect param is an async function\n    const getAsync = async () => {\n      const result = await asyncGetter();\n      setResponse({ loading: false, result });\n    };\n\n    getAsync();\n  }, [asyncGetter]);\n\n  return response;\n}\n\nexport const deviceInfoEmitter = new NativeEventEmitter(NativeModules.RNDeviceInfo);\n\n/**\n * simple hook wrapper for handling events\n * @param eventName\n * @param initialValueAsyncGetter\n * @param defaultValue\n */\nexport function useOnEvent<T>(\n  eventName: string,\n  initialValueAsyncGetter: () => Promise<T>,\n  defaultValue: T\n): AsyncHookResult<T> {\n  const { loading, result: initialResult } = useOnMount(initialValueAsyncGetter, defaultValue);\n  const [result, setResult] = useState<T>(defaultValue);\n\n  // sets the result to what the intial value is on mount\n  useEffect(() => {\n    setResult(initialResult);\n  }, [initialResult]);\n\n  // - set up the event listener to set the result\n  // - set up the clean up function to remove subscription on unmount\n  useEffect(() => {\n    const subscription = deviceInfoEmitter.addListener(eventName, setResult);\n    return () => subscription.remove();\n  }, [eventName]);\n\n  // loading will only be true while getting the inital value. After that, it will always be false, but a new result may occur\n  return { loading, result };\n}\n"]},"metadata":{},"sourceType":"module"}