{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar AppEventsLogger = require('react-native').NativeModules.FBAppEventsLogger;\n\nvar Platform = require(\"react-native-web/dist/exports/Platform\").default;\n\nmodule.exports = {\n  setFlushBehavior: function setFlushBehavior(flushBehavior) {\n    AppEventsLogger.setFlushBehavior(flushBehavior);\n  },\n  logEvent: function logEvent(eventName) {\n    var valueToSum = 0;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (typeof args[0] === 'number') {\n      valueToSum = args.shift();\n    }\n\n    var parameters = null;\n\n    if (typeof args[0] === 'object') {\n      parameters = args[0];\n    }\n\n    AppEventsLogger.logEvent(eventName, valueToSum, parameters);\n  },\n  logPurchase: function logPurchase(purchaseAmount, currencyCode, parameters) {\n    AppEventsLogger.logPurchase(purchaseAmount, currencyCode, parameters);\n  },\n  logPushNotificationOpen: function logPushNotificationOpen(payload) {\n    AppEventsLogger.logPushNotificationOpen(payload);\n  },\n  flush: function flush() {\n    AppEventsLogger.flush();\n  },\n  setUserID: function setUserID(userID) {\n    AppEventsLogger.setUserID(userID);\n  },\n  getUserID: function getUserID() {\n    return function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AppEventsLogger.getUserID());\n\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getAnonymousID: function getAnonymousID() {\n    return function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(AppEventsLogger.getAnonymousID());\n\n            case 2:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getAdvertiserID: function getAdvertiserID() {\n    return function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(AppEventsLogger.getAdvertiserID());\n\n            case 2:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getAttributionID: function getAttributionID() {\n    return function _callee4() {\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(Platform.OS === 'ios')) {\n                _context4.next = 2;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", null);\n\n            case 2:\n              _context4.next = 4;\n              return _regeneratorRuntime.awrap(AppEventsLogger.getAttributionID());\n\n            case 4:\n              return _context4.abrupt(\"return\", _context4.sent);\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  updateUserProperties: function updateUserProperties(parameters) {\n    AppEventsLogger.updateUserProperties(parameters);\n  },\n  setUserData: function setUserData(userData) {\n    AppEventsLogger.setUserData(userData);\n  },\n  setPushNotificationsDeviceToken: function setPushNotificationsDeviceToken(deviceToken) {\n    AppEventsLogger.setPushNotificationsDeviceToken(deviceToken);\n  },\n  setPushNotificationsRegistrationId: function setPushNotificationsRegistrationId(registrationId) {\n    AppEventsLogger.setPushNotificationsRegistrationId(registrationId);\n  }\n};","map":{"version":3,"mappings":"AAsBA;;;;AAEA,IAAMA,eAAe,GAAGC,OAAO,CAAC,cAAD,CAAPA,CAAwBC,aAAxBD,CAAsCE,iBAA9D;;;;AAmCAC,MAAM,CAACC,OAAPD,GAAiB;EAKfE,gBALe,4BAKEC,aALF,EAKyC;IACtDP,eAAe,CAACM,gBAAhBN,CAAiCO,aAAjCP;EANa;EAkBfQ,QAlBe,oBAkBNC,SAlBM,EAkB8C;IAC3D,IAAIC,UAAU,GAAG,CAAjB;;IAD2D,kCAA9BC,IAA8B;MAA9BA,IAA8B;IAAA;;IAE3D,IAAI,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAvB,EAAiC;MAC/BD,UAAU,GAAGC,IAAI,CAACC,KAALD,EAAbD;IACD;;IACD,IAAIG,UAAU,GAAG,IAAjB;;IACA,IAAI,OAAOF,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAvB,EAAiC;MAC/BE,UAAU,GAAGF,IAAI,CAAC,CAAD,CAAjBE;IACD;;IACDb,eAAe,CAACQ,QAAhBR,CAAyBS,SAAzBT,EAAoCU,UAApCV,EAAgDa,UAAhDb;EA3Ba;EAiCfc,WAjCe,uBAkCbC,cAlCa,EAmCbC,YAnCa,EAoCbH,UApCa,EAqCb;IACAb,eAAe,CAACc,WAAhBd,CAA4Be,cAA5Bf,EAA4CgB,YAA5ChB,EAA0Da,UAA1Db;EAtCa;EA4CfiB,uBA5Ce,mCA4CSC,OA5CT,EA4C2B;IACxClB,eAAe,CAACiB,uBAAhBjB,CAAwCkB,OAAxClB;EA7Ca;EAmDfmB,KAnDe,mBAmDP;IACNnB,eAAe,CAACmB,KAAhBnB;EApDa;EA2DfoB,SA3De,qBA2DLC,MA3DK,EA2DkB;IAC/BrB,eAAe,CAACoB,SAAhBpB,CAA0BqB,MAA1BrB;EA5Da;EAkETsB,SAlES,uBAkEqB;IAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,iCACrBtB,eAAe,CAACsB,SAAhBtB,EADqB;;YAAA;cAAA;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAlErB;EAyETuB,cAzES,4BAyE0B;IAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,iCAC1BvB,eAAe,CAACuB,cAAhBvB,EAD0B;;YAAA;cAAA;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAzE1B;EAgFTwB,eAhFS,6BAgF2B;IAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,iCAC3BxB,eAAe,CAACwB,eAAhBxB,EAD2B;;YAAA;cAAA;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAhF3B;EAwFTyB,gBAxFS,8BAwF4B;IAAA;MAAA;QAAA;UAAA;YAAA;cAAA,MACrCC,QAAQ,CAACC,EAATD,KAAgB,KADqB;gBAAA;gBAAA;cAAA;;cAAA,kCAEhC,IAFgC;;YAAA;cAAA;cAAA,iCAI5B1B,eAAe,CAACyB,gBAAhBzB,EAJ4B;;YAAA;cAAA;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAxF5B;EAmGf4B,oBAnGe,gCAmGMf,UAnGN,EAmG0B;IACvCb,eAAe,CAAC4B,oBAAhB5B,CAAqCa,UAArCb;EApGa;EA0Gf6B,WA1Ge,uBA0GHC,QA1GG,EA0GiB;IAC9B9B,eAAe,CAAC6B,WAAhB7B,CAA4B8B,QAA5B9B;EA3Ga;EAkHf+B,+BAlHe,2CAkHiBC,WAlHjB,EAkHsC;IACnDhC,eAAe,CAAC+B,+BAAhB/B,CAAgDgC,WAAhDhC;EAnHa;EA0HfiC,kCA1He,8CA0HoBC,cA1HpB,EA0H4C;IACzDlC,eAAe,CAACiC,kCAAhBjC,CAAmDkC,cAAnDlC;EACD;AA5Hc,CAAjBI","names":["AppEventsLogger","require","NativeModules","FBAppEventsLogger","module","exports","setFlushBehavior","flushBehavior","logEvent","eventName","valueToSum","args","shift","parameters","logPurchase","purchaseAmount","currencyCode","logPushNotificationOpen","payload","flush","setUserID","userID","getUserID","getAnonymousID","getAdvertiserID","getAttributionID","Platform","OS","updateUserProperties","setUserData","userData","setPushNotificationsDeviceToken","deviceToken","setPushNotificationsRegistrationId","registrationId"],"sources":["FBAppEventsLogger.js"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,\n * copy, modify, and distribute this software in source code or binary form for use\n * in connection with the web services and APIs provided by Facebook.\n *\n * As with any software that integrates with the Facebook platform, your use of\n * this software is subject to the Facebook Developer Principles and Policies\n * [http://developers.facebook.com/policy/]. This copyright notice shall be\n * included in all copies or substantial portions of the software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst AppEventsLogger = require('react-native').NativeModules.FBAppEventsLogger;\nconst {Platform} = require('react-native');\n/**\n * Controls when an AppEventsLogger sends log events to the server\n */\ntype AppEventsFlushBehavior =\n  /**\n   * Flush automatically: periodically (every 15 seconds or after every 100 events), and\n   * always at app reactivation. This is the default value.\n   */\n  | 'auto'\n  /**\n   * Only flush when AppEventsLogger.flush() is explicitly invoked.\n   */\n  | 'explicit_only';\ntype Params = {[key: string]: string | number};\n\n/**\n * Info about a user to increase chances of matching a Facebook user.\n * See https://developers.facebook.com/docs/app-events/advanced-matching for\n * more info about the expected format of each field.\n */\ntype UserData = $ReadOnly<{|\n  email?: ?string,\n  firstName?: ?string,\n  lastName?: ?string,\n  phone?: ?string,\n  dateOfBirth?: ?string,\n  gender?: ?('m' | 'f'),\n  city?: ?string,\n  state?: ?string,\n  zip?: ?string,\n  country?: ?string,\n|}>;\n\nmodule.exports = {\n  /**\n   * Sets the current event flushing behavior specifying when events\n   * are sent back to Facebook servers.\n   */\n  setFlushBehavior(flushBehavior: AppEventsFlushBehavior) {\n    AppEventsLogger.setFlushBehavior(flushBehavior);\n  },\n\n  /**\n   * Logs an event with eventName and optional arguments.\n   * This function supports the following usage:\n   * logEvent(eventName: string);\n   * logEvent(eventName: string, valueToSum: number);\n   * logEvent(eventName: string, parameters: {[key:string]:string|number});\n   * logEvent(eventName: string, valueToSum: number, parameters: {[key:string]:string|number});\n   * See https://developers.facebook.com/docs/app-events/android for detail.\n   */\n  logEvent(eventName: string, ...args: Array<number | Params>) {\n    let valueToSum = 0;\n    if (typeof args[0] === 'number') {\n      valueToSum = args.shift();\n    }\n    let parameters = null;\n    if (typeof args[0] === 'object') {\n      parameters = args[0];\n    }\n    AppEventsLogger.logEvent(eventName, valueToSum, parameters);\n  },\n\n  /**\n   * Logs a purchase. See http://en.wikipedia.org/wiki/ISO_4217 for currencyCode.\n   */\n  logPurchase(\n    purchaseAmount: number,\n    currencyCode: string,\n    parameters?: ?Params,\n  ) {\n    AppEventsLogger.logPurchase(purchaseAmount, currencyCode, parameters);\n  },\n\n  /**\n   * Logs an app event that tracks that the application was open via Push Notification.\n   */\n  logPushNotificationOpen(payload: ?Object) {\n    AppEventsLogger.logPushNotificationOpen(payload);\n  },\n\n  /**\n   * Explicitly kicks off flushing of events to Facebook.\n   */\n  flush() {\n    AppEventsLogger.flush();\n  },\n\n  /**\n   * Sets a custom user ID to associate with all app events.\n   * The userID is persisted until it is cleared by passing nil.\n   */\n  setUserID(userID: string | null) {\n    AppEventsLogger.setUserID(userID);\n  },\n\n  /**\n   * Returns user id or null if not set\n   */\n  async getUserID(): Promise<?string> {\n    return await AppEventsLogger.getUserID();\n  },\n\n  /**\n   * Returns anonymous id or null if not set\n   */\n  async getAnonymousID(): Promise<?string> {\n    return await AppEventsLogger.getAnonymousID();\n  },\n\n  /**\n   * Returns advertiser id or null if not set\n   */\n  async getAdvertiserID(): Promise<?string> {\n    return await AppEventsLogger.getAdvertiserID();\n  },\n\n  /**\n   * Returns advertiser id or null if not set.\n   * @platform android\n   */\n  async getAttributionID(): Promise<?string> {\n    if (Platform.OS === 'ios') {\n      return null;\n    }\n    return await AppEventsLogger.getAttributionID();\n  },\n\n  /**\n   * Sends a request to update the properties for the current user, set by\n   * setUserID. You must call setUserID before making this call.\n   */\n  updateUserProperties(parameters: Params) {\n    AppEventsLogger.updateUserProperties(parameters);\n  },\n\n  /**\n   * Set additional data about the user to increase chances of matching a Facebook user.\n   */\n  setUserData(userData: UserData) {\n    AppEventsLogger.setUserData(userData);\n  },\n\n  /**\n   * For iOS only, sets and sends device token to register the current application for push notifications.\n   * @platform ios\n   */\n  setPushNotificationsDeviceToken(deviceToken: string) {\n    AppEventsLogger.setPushNotificationsDeviceToken(deviceToken);\n  },\n\n  /**\n   * For Android only, sets and sends registration id to register the current app for push notifications.\n   * @platform Android\n   */\n  setPushNotificationsRegistrationId(registrationId: string) {\n    AppEventsLogger.setPushNotificationsRegistrationId(registrationId);\n  },\n};\n"]},"metadata":{},"sourceType":"script"}