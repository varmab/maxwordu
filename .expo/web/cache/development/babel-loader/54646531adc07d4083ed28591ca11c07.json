{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"syncGetter\"];\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar memo = {};\nexport function clearMemo() {\n  memo = {};\n}\n\nfunction getSupportedFunction(supportedPlatforms, getter, defaultGetter) {\n  var supportedMap = {};\n  supportedPlatforms.filter(function (key) {\n    return Platform.OS == key;\n  }).forEach(function (key) {\n    return supportedMap[key] = getter;\n  });\n  return Platform.select(_objectSpread(_objectSpread({}, supportedMap), {}, {\n    default: defaultGetter\n  }));\n}\n\nexport function getSupportedPlatformInfoSync(_ref) {\n  var getter = _ref.getter,\n      supportedPlatforms = _ref.supportedPlatforms,\n      defaultValue = _ref.defaultValue,\n      memoKey = _ref.memoKey;\n\n  if (memoKey && memo[memoKey] != undefined) {\n    return memo[memoKey];\n  } else {\n    var output = getSupportedFunction(supportedPlatforms, getter, function () {\n      return defaultValue;\n    })();\n\n    if (memoKey) {\n      memo[memoKey] = output;\n    }\n\n    return output;\n  }\n}\nexport function getSupportedPlatformInfoAsync(_ref2) {\n  var getter, supportedPlatforms, defaultValue, memoKey, output;\n  return _regeneratorRuntime.async(function getSupportedPlatformInfoAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          getter = _ref2.getter, supportedPlatforms = _ref2.supportedPlatforms, defaultValue = _ref2.defaultValue, memoKey = _ref2.memoKey;\n\n          if (!(memoKey && memo[memoKey] != undefined)) {\n            _context.next = 5;\n            break;\n          }\n\n          return _context.abrupt(\"return\", memo[memoKey]);\n\n        case 5:\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(getSupportedFunction(supportedPlatforms, getter, function () {\n            return Promise.resolve(defaultValue);\n          })());\n\n        case 7:\n          output = _context.sent;\n\n          if (memoKey) {\n            memo[memoKey] = output;\n          }\n\n          return _context.abrupt(\"return\", output);\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getSupportedPlatformInfoFunctions(_ref3) {\n  var syncGetter = _ref3.syncGetter,\n      asyncParams = _objectWithoutProperties(_ref3, _excluded);\n\n  return [function () {\n    return getSupportedPlatformInfoAsync(asyncParams);\n  }, function () {\n    return getSupportedPlatformInfoSync(_objectSpread(_objectSpread({}, asyncParams), {}, {\n      getter: syncGetter\n    }));\n  }];\n}","map":{"version":3,"mappings":";;;;;;;;;;AAYA,IAAIA,IAAc,GAAG,EAArB;AAEA,OAAO,SAASC,SAAT,GAAqB;EAC1BD,IAAI,GAAG,EAAPA;AACD;;AAQD,SAASE,oBAAT,CACEC,kBADF,EAEEC,MAFF,EAGEC,aAHF,EAIa;EACX,IAAIC,YAAiB,GAAG,EAAxB;EACAH,kBAAkB,CACfI,MADHJ,CACWK,aAAD;IAAA,OAASC,QAAQ,CAACC,EAATD,IAAeD,GAAxB;EAAA,CADVL,EAEGQ,OAFHR,CAEYK,aAAD;IAAA,OAAUF,YAAY,CAACE,GAAD,CAAZF,GAAoBF,MAA9B;EAAA,CAFXD;EAGA,OAAOM,QAAQ,CAACG,MAATH,iCACFH,YADEG;IAELI,OAAO,EAAER;EAFJI,GAAP;AAID;;AAMD,OAAO,SAASK,4BAAT,OAKsC;EAAA,IAJ3CV,MAI2C,QAJ3CA,MAI2C;EAAA,IAH3CD,kBAG2C,QAH3CA,kBAG2C;EAAA,IAF3CY,YAE2C,QAF3CA,YAE2C;EAAA,IAD3CC,OAC2C,QAD3CA,OAC2C;;EAC3C,IAAIA,OAAO,IAAIhB,IAAI,CAACgB,OAAD,CAAJhB,IAAiBiB,SAAhC,EAA2C;IACzC,OAAOjB,IAAI,CAACgB,OAAD,CAAX;EADF,OAEO;IACL,IAAME,MAAM,GAAGhB,oBAAoB,CAACC,kBAAD,EAAqBC,MAArB,EAA6B;MAAA,OAAMW,YAAN;IAAA,CAA7B,CAApBb,EAAf;;IACA,IAAIc,OAAJ,EAAa;MACXhB,IAAI,CAACgB,OAAD,CAAJhB,GAAgBkB,MAAhBlB;IACD;;IACD,OAAOkB,MAAP;EACD;AACF;AAMD,OAAO,SAAeC,6BAAf;EAAA;EAAA;IAAA;MAAA;QAAA;UACLf,MADK,SACLA,MADK,EAELD,kBAFK,SAELA,kBAFK,EAGLY,YAHK,SAGLA,YAHK,EAILC,OAJK,SAILA,OAJK;;UAAA,MAMDA,OAAO,IAAIhB,IAAI,CAACgB,OAAD,CAAJhB,IAAiBiB,SAN3B;YAAA;YAAA;UAAA;;UAAA,iCAOIjB,IAAI,CAACgB,OAAD,CAPR;;QAAA;UAAA;UAAA,iCASkBd,oBAAoB,CAACC,kBAAD,EAAqBC,MAArB,EAA6B;YAAA,OACpEgB,OAAO,CAACC,OAARD,CAAgBL,YAAhBK,CADoE;UAAA,CAA7B,CAApBlB,EATlB;;QAAA;UASGgB,MATH;;UAYH,IAAIF,OAAJ,EAAa;YACXhB,IAAI,CAACgB,OAAD,CAAJhB,GAAgBkB,MAAhBlB;UACD;;UAdE,iCAgBIkB,MAhBJ;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAwBP,OAAO,SAASI,iCAAT,QAGyE;EAAA,IAF9EC,UAE8E,SAF9EA,UAE8E;EAAA,IAD3EC,WAC2E;;EAC9E,OAAO,CACL;IAAA,OAAML,6BAA6B,CAACK,WAAD,CAAnC;EAAA,CADK,EAEL;IAAA,OAAMV,4BAA4B,iCAAMU,WAAN;MAAmBpB,MAAM,EAAEmB;IAA3B,GAAlC;EAAA,CAFK,CAAP;AAID","names":["memo","clearMemo","getSupportedFunction","supportedPlatforms","getter","defaultGetter","supportedMap","filter","key","Platform","OS","forEach","select","default","getSupportedPlatformInfoSync","defaultValue","memoKey","undefined","output","getSupportedPlatformInfoAsync","Promise","resolve","getSupportedPlatformInfoFunctions","syncGetter","asyncParams"],"sources":["supported-platform-info.ts"],"sourcesContent":["import { Platform } from 'react-native';\n\nimport {\n  PlatformArray,\n  Getter,\n  GetSupportedPlatformInfoAsyncParams,\n  GetSupportedPlatformInfoSyncParams,\n  GetSupportedPlatformInfoFunctionsParams,\n} from './privateTypes';\n\ntype MemoType = { [key: string]: any };\n// centralized memo object\nlet memo: MemoType = {};\n\nexport function clearMemo() {\n  memo = {};\n}\n\n/**\n * function returns the proper getter based current platform X supported platforms\n * @param supportedPlatforms array of supported platforms (OS)\n * @param getter desired function used to get info\n * @param defaultGetter getter that returns a default value if desired getter is not supported by current platform\n */\nfunction getSupportedFunction<T>(\n  supportedPlatforms: PlatformArray,\n  getter: Getter<T>,\n  defaultGetter: Getter<T>\n): Getter<T> {\n  let supportedMap: any = {};\n  supportedPlatforms\n    .filter((key) => Platform.OS == key)\n    .forEach((key) => (supportedMap[key] = getter));\n  return Platform.select({\n    ...supportedMap,\n    default: defaultGetter,\n  });\n}\n\n/**\n * function used to get desired info synchronously — with optional memoization\n * @param param0\n */\nexport function getSupportedPlatformInfoSync<T>({\n  getter,\n  supportedPlatforms,\n  defaultValue,\n  memoKey,\n}: GetSupportedPlatformInfoSyncParams<T>): T {\n  if (memoKey && memo[memoKey] != undefined) {\n    return memo[memoKey];\n  } else {\n    const output = getSupportedFunction(supportedPlatforms, getter, () => defaultValue)();\n    if (memoKey) {\n      memo[memoKey] = output;\n    }\n    return output;\n  }\n}\n\n/**\n * function used to get desired info asynchronously — with optional memoization\n * @param param0\n */\nexport async function getSupportedPlatformInfoAsync<T>({\n  getter,\n  supportedPlatforms,\n  defaultValue,\n  memoKey,\n}: GetSupportedPlatformInfoAsyncParams<T>): Promise<T> {\n  if (memoKey && memo[memoKey] != undefined) {\n    return memo[memoKey];\n  } else {\n    const output = await getSupportedFunction(supportedPlatforms, getter, () =>\n      Promise.resolve(defaultValue)\n    )();\n    if (memoKey) {\n      memo[memoKey] = output;\n    }\n\n    return output;\n  }\n}\n\n/**\n * function that returns array of getter functions [async, sync]\n * @param param0\n */\nexport function getSupportedPlatformInfoFunctions<T>({\n  syncGetter,\n  ...asyncParams\n}: GetSupportedPlatformInfoFunctionsParams<T>): [Getter<Promise<T>>, Getter<T>] {\n  return [\n    () => getSupportedPlatformInfoAsync(asyncParams),\n    () => getSupportedPlatformInfoSync({ ...asyncParams, getter: syncGetter }),\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}